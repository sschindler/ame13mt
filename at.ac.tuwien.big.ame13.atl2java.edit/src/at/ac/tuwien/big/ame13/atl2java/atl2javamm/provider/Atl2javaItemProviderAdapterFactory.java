/**
 */
package at.ac.tuwien.big.ame13.atl2java.atl2javamm.provider;

import at.ac.tuwien.big.ame13.atl2java.atl2javamm.util.Atl2javaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Atl2javaItemProviderAdapterFactory extends Atl2javaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Atl2javaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.Transformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationItemProvider transformationItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.Transformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationAdapter() {
		if (transformationItemProvider == null) {
			transformationItemProvider = new TransformationItemProvider(this);
		}

		return transformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPatternItemProvider inputPatternItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPatternAdapter() {
		if (inputPatternItemProvider == null) {
			inputPatternItemProvider = new InputPatternItemProvider(this);
		}

		return inputPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPatternItemProvider outputPatternItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPatternAdapter() {
		if (outputPatternItemProvider == null) {
			outputPatternItemProvider = new OutputPatternItemProvider(this);
		}

		return outputPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPatternElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPatternElementItemProvider inputPatternElementItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPatternElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPatternElementAdapter() {
		if (inputPatternElementItemProvider == null) {
			inputPatternElementItemProvider = new InputPatternElementItemProvider(this);
		}

		return inputPatternElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPatternElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPatternElementItemProvider outputPatternElementItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPatternElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPatternElementAdapter() {
		if (outputPatternElementItemProvider == null) {
			outputPatternElementItemProvider = new OutputPatternElementItemProvider(this);
		}

		return outputPatternElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.PrimitiveBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveBindingItemProvider primitiveBindingItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.PrimitiveBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveBindingAdapter() {
		if (primitiveBindingItemProvider == null) {
			primitiveBindingItemProvider = new PrimitiveBindingItemProvider(this);
		}

		return primitiveBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.NavigationBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationBindingItemProvider navigationBindingItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.NavigationBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationBindingAdapter() {
		if (navigationBindingItemProvider == null) {
			navigationBindingItemProvider = new NavigationBindingItemProvider(this);
		}

		return navigationBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputpatternElementBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputpatternElementBindingItemProvider outputpatternElementBindingItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputpatternElementBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputpatternElementBindingAdapter() {
		if (outputpatternElementBindingItemProvider == null) {
			outputpatternElementBindingItemProvider = new OutputpatternElementBindingItemProvider(this);
		}

		return outputpatternElementBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.ResolveBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolveBindingItemProvider resolveBindingItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.ResolveBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolveBindingAdapter() {
		if (resolveBindingItemProvider == null) {
			resolveBindingItemProvider = new ResolveBindingItemProvider(this);
		}

		return resolveBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.SourceModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceModelItemProvider sourceModelItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.SourceModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceModelAdapter() {
		if (sourceModelItemProvider == null) {
			sourceModelItemProvider = new SourceModelItemProvider(this);
		}

		return sourceModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.TargetModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetModelItemProvider targetModelItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.ame13.atl2java.atl2javamm.TargetModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetModelAdapter() {
		if (targetModelItemProvider == null) {
			targetModelItemProvider = new TargetModelItemProvider(this);
		}

		return targetModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (transformationItemProvider != null) transformationItemProvider.dispose();
		if (inputPatternItemProvider != null) inputPatternItemProvider.dispose();
		if (outputPatternItemProvider != null) outputPatternItemProvider.dispose();
		if (inputPatternElementItemProvider != null) inputPatternElementItemProvider.dispose();
		if (outputPatternElementItemProvider != null) outputPatternElementItemProvider.dispose();
		if (primitiveBindingItemProvider != null) primitiveBindingItemProvider.dispose();
		if (navigationBindingItemProvider != null) navigationBindingItemProvider.dispose();
		if (outputpatternElementBindingItemProvider != null) outputpatternElementBindingItemProvider.dispose();
		if (resolveBindingItemProvider != null) resolveBindingItemProvider.dispose();
		if (sourceModelItemProvider != null) sourceModelItemProvider.dispose();
		if (targetModelItemProvider != null) targetModelItemProvider.dispose();
	}

}
