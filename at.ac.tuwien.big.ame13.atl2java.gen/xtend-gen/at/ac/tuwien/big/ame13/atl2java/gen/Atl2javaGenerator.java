package at.ac.tuwien.big.ame13.atl2java.gen;

import at.ac.tuwien.big.ame13.atl2java.atl2javamm.Model;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.Transformation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class Atl2javaGenerator implements IGenerator {
  private String PACKAGE_PATH = "/at/ac/tuwien/big/ame13/atl2java/gen/";
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    for (final EObject object : _contents) {
      {
        Transformation t = ((Transformation) object);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append(this.PACKAGE_PATH, "");
        String _name = t.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("Transformation.java");
        CharSequence _generateTransformationCode = this.generateTransformationCode(t);
        fsa.generateFile(_builder.toString(), _generateTransformationCode);
      }
    }
  }
  
  public CharSequence generateTransformationCode(final Transformation t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package at.ac.tuwien.big.ame13.atl2java.gen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// ATL code to be expressed as Java Code");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//-- @path MM=/A2B/A.ecore");
    _builder.newLine();
    _builder.append("//-- @path MM1=/A2B/B.ecore");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//module A2B;");
    _builder.newLine();
    _builder.append("//create OUT : MM1 from IN : MM;");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//rule Model2Model {");
    _builder.newLine();
    _builder.append("//\tfrom");
    _builder.newLine();
    _builder.append("//\t\tmodelA : MM!Model");
    _builder.newLine();
    _builder.append("//\tto ");
    _builder.newLine();
    _builder.append("//\t\tmodelB : MM1!Model (");
    _builder.newLine();
    _builder.append("//\t\t\tb <- modelA.a");
    _builder.newLine();
    _builder.append("//\t\t)");
    _builder.newLine();
    _builder.append("//}");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//rule A2B {");
    _builder.newLine();
    _builder.append("//\tfrom");
    _builder.newLine();
    _builder.append("//\t\ta : MM!A");
    _builder.newLine();
    _builder.append("//\tto ");
    _builder.newLine();
    _builder.append("//\t\tb : MM1!B (");
    _builder.newLine();
    _builder.append("//\t\t\tid <- a.name");
    _builder.newLine();
    _builder.append("//\t\t)");
    _builder.newLine();
    _builder.append("//}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.Vector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.TreeIterator;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TracemodelFactory;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientElement;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientLink;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientLinkSet;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.utility.EMFModelLoader;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = t.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("Transformation {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// load models");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EMFModelLoader mLoader = new EMFModelLoader();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource srcM = mLoader.loadModel(\"");
    EList<Model> _sourceModels = t.getSourceModels();
    Model _get = _sourceModels.get(0);
    String _path = _get.getPath();
    _builder.append(_path, "		");
    EList<Model> _sourceModels_1 = t.getSourceModels();
    Model _get_1 = _sourceModels_1.get(0);
    String _metamodel = _get_1.getMetamodel();
    _builder.append(_metamodel, "		");
    _builder.append("\", \"testmodel/modelA.xmi\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource srcMM = mLoader.loadMetamodel(\"");
    EList<Model> _sourceModels_2 = t.getSourceModels();
    Model _get_2 = _sourceModels_2.get(0);
    String _path_1 = _get_2.getPath();
    _builder.append(_path_1, "		");
    EList<Model> _sourceModels_3 = t.getSourceModels();
    Model _get_3 = _sourceModels_3.get(0);
    String _metamodel_1 = _get_3.getMetamodel();
    _builder.append(_metamodel_1, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource trgMM = mLoader.loadMetamodel(\"");
    EList<Model> _targetModels = t.getTargetModels();
    Model _get_4 = _targetModels.get(0);
    String _path_2 = _get_4.getPath();
    _builder.append(_path_2, "		");
    EList<Model> _targetModels_1 = t.getTargetModels();
    Model _get_5 = _targetModels_1.get(0);
    String _metamodel_2 = _get_5.getMetamodel();
    _builder.append(_metamodel_2, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// get company factory");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EFactory efactory = ((EPackage)trgMM.getContents().get(0)).getEFactoryInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TracemodelFactory tFactory = TracemodelFactory.eINSTANCE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TransientLinkSet tls = tFactory.createTransientLinkSet();\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Creation Phase");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Vector<EObject> match = getElements4Type(srcM, \"");
    EList<Model> _sourceModels_4 = t.getSourceModels();
    Model _get_6 = _sourceModels_4.get(0);
    String _name_1 = _get_6.getName();
    _builder.append(_name_1, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Iterator<EObject> matchIter = match.iterator();\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(matchIter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject src = matchIter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject trg = createTargetElement(trgMM, \"");
    EList<Model> _targetModels_2 = t.getTargetModels();
    Model _get_7 = _targetModels_2.get(0);
    String _name_2 = _get_7.getName();
    _builder.append(_name_2, "			");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("TransientLink tl = tFactory.createTransientLink();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientElement tse = tFactory.createTransientElement();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientElement tte = tFactory.createTransientElement();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tse.setValue(src);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tte.setValue(trg);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tl.getSourceElements().add(tse);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tl.getTargetElements().add(tte);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tls.getTransientLinks().add(tl);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("match = getElements4Type(srcM, \"Model\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("matchIter = match.iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(matchIter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject src = matchIter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject trg = createTargetElement(trgMM, \"Model\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientLink tl = tFactory.createTransientLink();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientElement tse = tFactory.createTransientElement();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientElement tte = tFactory.createTransientElement();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tse.setValue(src);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tte.setValue(trg);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tl.getSourceElements().add(tse);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tl.getTargetElements().add(tte);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tls.getTransientLinks().add(tl);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Initialization Phase ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<TransientLink> traces = tls.getTransientLinks().iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(traces.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TransientLink tl = traces.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<TransientElement> teIter = tl.getTargetElements().iterator();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(teIter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("EObject obj = teIter.next().getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(obj.eClass().getName().equals(\"Model\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("EStructuralFeature f = obj.eClass().getEStructuralFeature(\"b\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Vector<EObject> trgObjs = new Vector<EObject>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Vector<EObject> srcObjs = getElements4Type(srcM, \"A\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Iterator<EObject> srcObjsIter = srcObjs.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(srcObjsIter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EObject srcObj = srcObjsIter.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("TransientLink tlTemp = tls.getLinkBySourceElement(srcObj);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("trgObjs.add(tlTemp.getTargetElements().get(0).getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("obj.eSet(f, trgObjs);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else if(obj.eClass().getName().equals(\"B\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("EStructuralFeature f = obj.eClass().getEStructuralFeature(\"id\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("EStructuralFeature f2 = tl.getSourceElements().get(0).getValue().eClass().getEStructuralFeature(\"name\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("obj.eSet(f, tl.getSourceElements().get(0).getValue().eGet(f2));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject rootElement = EcoreUtil.getRootContainer( tls.getTransientLinks().get(0).getTargetElements().get(0).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("saveResource(rootElement);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static EObject createTargetElement(Resource MM, String className) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EFactory efactory = ((EPackage)MM.getContents().get(0)).getEFactoryInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EClass clazz = getEClassFromMM(MM, className);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject obj = efactory.create(clazz);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return obj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Vector<EObject> getElements4Type(Resource srcM, String typeName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Vector<EObject> match = new Vector<EObject>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TreeIterator<EObject> iter = srcM.getAllContents();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject obj = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(obj.eClass().getName().equals(typeName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("match.add(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return match;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void saveResource(EObject rootElement) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ResourceSet resourceSet = new ResourceSetImpl();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"xmi\", new XMIResourceFactoryImpl());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource resource = resourceSet.createResource(URI.createFileURI(\"testmodel/modelB.xmi\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resource.getContents().add(rootElement);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resource.save(null);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static EClass getEClassFromMM(Resource MM, String className){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TreeIterator<EObject> iter = MM.getAllContents();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iter.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject obj = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(obj instanceof EClass){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("EClass clazz = (EClass) obj;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(clazz.getName().equals(className)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return clazz;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
