package at.ac.tuwien.big.ame13.atl2java.gen;

import at.ac.tuwien.big.ame13.atl2java.atl2javamm.Binding;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPattern;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.InputPatternElement;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.NavigationBinding;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPattern;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputPatternElement;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.OutputpatternElementBinding;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.PrimitiveBinding;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.ResolveBinding;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.Rule;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.SourceModel;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.TargetModel;
import at.ac.tuwien.big.ame13.atl2java.atl2javamm.Transformation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class Atl2javaGenerator implements IGenerator {
  private String PACKAGE_PATH = "/at/ac/tuwien/big/ame13/atl2java/gen/";
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    for (final EObject object : _contents) {
      {
        Transformation t = ((Transformation) object);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append(this.PACKAGE_PATH, "");
        String _name = t.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("Transformation.java");
        CharSequence _generateTransformationCode = this.generateTransformationCode(t);
        fsa.generateFile(_builder.toString(), _generateTransformationCode);
      }
    }
  }
  
  public CharSequence generateTransformationCode(final Transformation t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package at.ac.tuwien.big.ame13.atl2java.gen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.Vector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.TreeIterator;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TracemodelFactory;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientElement;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientLink;");
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.tracemodel.TransientLinkSet;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import at.ac.tuwien.big.ame13.atl2java.gen.utility.EMFModelLoader;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = t.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("Transformation {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// load models");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EMFModelLoader mLoader = new EMFModelLoader();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource srcM = mLoader.loadModel(\"");
    SourceModel _sourceModel = t.getSourceModel();
    String _path = _sourceModel.getPath();
    _builder.append(_path, "		");
    _builder.append("/");
    SourceModel _sourceModel_1 = t.getSourceModel();
    String _metamodel = _sourceModel_1.getMetamodel();
    _builder.append(_metamodel, "		");
    _builder.append("\", \"testmodel/modelA.xmi\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Resource srcMM = mLoader.loadMetamodel(\"");
    SourceModel _sourceModel_2 = t.getSourceModel();
    String _path_1 = _sourceModel_2.getPath();
    _builder.append(_path_1, "		");
    _builder.append("/");
    SourceModel _sourceModel_3 = t.getSourceModel();
    String _metamodel_1 = _sourceModel_3.getMetamodel();
    _builder.append(_metamodel_1, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource trgMM = mLoader.loadMetamodel(\"");
    TargetModel _targetModel = t.getTargetModel();
    String _path_2 = _targetModel.getPath();
    _builder.append(_path_2, "		");
    _builder.append("/");
    TargetModel _targetModel_1 = t.getTargetModel();
    String _metamodel_2 = _targetModel_1.getMetamodel();
    _builder.append(_metamodel_2, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// get company factory");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TracemodelFactory tFactory = TracemodelFactory.eINSTANCE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TransientLinkSet tls = tFactory.createTransientLinkSet();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("* creation phase");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// get all elements from the source model");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String,Vector<EObject>> sourceElements = new HashMap<String,Vector<EObject>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TreeIterator<EObject> iter = srcM.getAllContents();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Vector<EObject> temp;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iter.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject obj = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(sourceElements.containsKey(obj.eClass().getName())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("temp = sourceElements.get(obj.eClass().getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("temp.add(obj);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sourceElements.put(obj.eClass().getName(), temp);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("temp = new Vector<EObject>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("temp.add(obj);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sourceElements.put(obj.eClass().getName(), temp);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("* creation helpers:");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// list with number of each element type\'s occurrence");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Integer> sizeList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// minimum number of all element type\'s occurrence");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int minSize;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// transient link");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TransientLink tl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// source object");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject srcObj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// target object");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject trgObj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// transient source element");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TransientElement tse;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// transient target element");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TransientElement tte;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("* initialization helpers:");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EStructuralFeature pBF;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// HashMap<trgObject,HashMap<trgFeature,navigation_value>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<EObject,HashMap<String,String>> nBindings = new HashMap<EObject,HashMap<String,String>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String,String> nBHM;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<EObject,HashMap<String,String>> oPEBindings = new HashMap<EObject,HashMap<String,String>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String,String> oPEBHM;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Rule> _rules = t.getRules();
      for(final Rule rule : _rules) {
        _builder.append("\t\t");
        _builder.append("sizeList = new ArrayList<Integer>();");
        _builder.newLine();
        {
          InputPattern _inputPattern = rule.getInputPattern();
          EList<InputPatternElement> _inputPatternElements = _inputPattern.getInputPatternElements();
          for(final InputPatternElement ipe : _inputPatternElements) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("Vector<EObject> srcElements");
            String _type = ipe.getType();
            _builder.append(_type, "			");
            _builder.append(" = sourceElements.get(\"");
            String _type_1 = ipe.getType();
            _builder.append(_type_1, "			");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("sizeList.add(srcElements");
            String _type_2 = ipe.getType();
            _builder.append(_type_2, "			");
            _builder.append(".size());");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("Collections.sort(sizeList);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("minSize = sizeList.get(0);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(int i = 0; i < minSize; i++) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// further problem: how should we know which input element we should take, e.g. for the binding (if we have several input pattern elements;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// just the smallest occurrences of the input elements are matched)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("tl = tFactory.createTransientLink();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// saving all transient source elements in the link");
        _builder.newLine();
        {
          InputPattern _inputPattern_1 = rule.getInputPattern();
          EList<InputPatternElement> _inputPatternElements_1 = _inputPattern_1.getInputPatternElements();
          for(final InputPatternElement ipe_1 : _inputPatternElements_1) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("srcObj = srcElements");
            String _type_3 = ipe_1.getType();
            _builder.append(_type_3, "			");
            _builder.append(".get(i);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tse = tFactory.createTransientElement();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tse.setValue(srcObj);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tse.setVar(\"");
            String _var = ipe_1.getVar();
            _builder.append(_var, "			");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tl.getSourceElements().add(tse);");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          OutputPattern _outputPattern = rule.getOutputPattern();
          EList<OutputPatternElement> _outputPatternElements = _outputPattern.getOutputPatternElements();
          for(final OutputPatternElement ope : _outputPatternElements) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("trgObj = createTargetElement(trgMM, \"");
            String _type_4 = ope.getType();
            _builder.append(_type_4, "			");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tte = tFactory.createTransientElement();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tte.setValue(trgObj);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tte.setVar(\"");
            String _var_1 = ope.getVar();
            _builder.append(_var_1, "			");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("tl.getTargetElements().add(tte);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.newLine();
            {
              EList<Binding> _bindings = ope.getBindings();
              for(final Binding binding : _bindings) {
                {
                  if ((binding instanceof PrimitiveBinding)) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("pBF = trgObj.eClass().getEStructuralFeature(\"");
                    String _feature = binding.getFeature();
                    _builder.append(_feature, "			");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("trgObj.eSet(pBF, \"");
                    String _value = binding.getValue();
                    _builder.append(_value, "			");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  } else {
                    if ((binding instanceof NavigationBinding)) {
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("if(nBindings.containsKey(trgObj)) {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("nBHM = nBindings.get(trgObj);");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("if(!nBHM.containsKey(\"");
                      String _feature_1 = binding.getFeature();
                      _builder.append(_feature_1, "				");
                      _builder.append("\")) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t\t");
                      _builder.append("nBHM.put(\"");
                      String _feature_2 = binding.getFeature();
                      _builder.append(_feature_2, "					");
                      _builder.append("\", \"");
                      String _value_1 = binding.getValue();
                      _builder.append(_value_1, "					");
                      _builder.append("\");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t\t");
                      _builder.append("nBindings.put(trgObj, nBHM);");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("} else {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("nBHM = new HashMap<String,String>();");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("nBHM.put(\"");
                      String _feature_3 = binding.getFeature();
                      _builder.append(_feature_3, "				");
                      _builder.append("\", \"");
                      String _value_2 = binding.getValue();
                      _builder.append(_value_2, "				");
                      _builder.append("\");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("nBindings.put(trgObj, nBHM);");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      if ((binding instanceof OutputpatternElementBinding)) {
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("if(oPEBindings.containsKey(trgObj)) {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("oPEBHM = oPEBindings.get(trgObj);");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("if(!oPEBHM.containsKey(\"");
                        String _feature_4 = binding.getFeature();
                        _builder.append(_feature_4, "				");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("oPEBHM.put(\"");
                        String _feature_5 = binding.getFeature();
                        _builder.append(_feature_5, "					");
                        _builder.append("\", \"");
                        String _value_3 = binding.getValue();
                        _builder.append(_value_3, "					");
                        _builder.append("\");");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("oPEBindings.put(trgObj, oPEBHM);");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("} else {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("oPEBHM = new HashMap<String,String>();");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("oPEBHM.put(\"");
                        String _feature_6 = binding.getFeature();
                        _builder.append(_feature_6, "				");
                        _builder.append("\", \"");
                        String _value_4 = binding.getValue();
                        _builder.append(_value_4, "				");
                        _builder.append("\");");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("oPEBindings.put(trgObj, oPEBHM);");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("tls.getTransientLinks().add(tl);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("* initialization phase");
    _builder.newLine();
    _builder.append("\t \t ");
    _builder.append("*/");
    _builder.newLine();
    {
      EList<Rule> _rules_1 = t.getRules();
      Rule _get = _rules_1.get(0);
      OutputPattern _outputPattern_1 = _get.getOutputPattern();
      EList<OutputPatternElement> _outputPatternElements_1 = _outputPattern_1.getOutputPatternElements();
      OutputPatternElement _get_1 = _outputPatternElements_1.get(0);
      EList<Binding> _bindings_1 = _get_1.getBindings();
      Binding _get_2 = _bindings_1.get(0);
      if ((_get_2 instanceof ResolveBinding)) {
        _builder.append("\t\t");
        _builder.append("// IST EIN RESOLVEBINDING");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("Iterator<TransientLink> traces = tls.getTransientLinks().iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(traces.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tl = traces.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<TransientElement> teIter = tl.getTargetElements().iterator();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(teIter.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// target object");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("EObject obj = teIter.next().getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(nBindings.containsKey(obj)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("HashMap<String,String> nBinding = nBindings.get(obj);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Set<String> nBindingFeatures = nBinding.keySet();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(String nBindingFeature : nBindingFeatures) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EStructuralFeature f = obj.eClass().getEStructuralFeature(nBindingFeature);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String[] navigation = nBinding.get(nBindingFeature).split(\"\\\\.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EObject navElement = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO tl.getSourceElementByVar(navigation[0]) in TransientLinkImpl.java faulty (getValue() instead of getVar())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EList<TransientElement> testList = tl.getSourceElements();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for(TransientElement testTE : testList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if(testTE.getVar().equals(navigation[0])) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("navElement = testTE.getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(navElement == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// navigation by target element");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("testList = tl.getTargetElements();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for(TransientElement testTE : testList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if(testTE.getVar().equals(navigation[0])) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("navElement = testTE.getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EStructuralFeature f2 = navElement.eClass().getEStructuralFeature(navigation[1]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Object f2Value = navElement.eGet(f2);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(f2Value instanceof String) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("obj.eSet(f, f2Value);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else if(f2Value instanceof EList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("EList<EObject> f2List = (EList<EObject>) f2Value;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Vector<EObject> f2TList = new Vector<EObject>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for(EObject srcElement : f2List) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("TransientLink tlTemp = tls.getLinkBySourceElement(srcElement);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("EList<TransientElement> targets = tlTemp.getTargetElements();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("for(TransientElement target : targets) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("f2TList.add(target.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("obj.eSet(f, f2TList);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(oPEBindings.containsKey(obj)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("HashMap<String,String> oPEBinding = oPEBindings.get(obj);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Set<String> oPEBindingFeatures = oPEBinding.keySet();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(String oPEBindingFeature : oPEBindingFeatures) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EStructuralFeature f = obj.eClass().getEStructuralFeature(oPEBindingFeature);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String var = oPEBinding.get(oPEBindingFeature);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EObject varElement = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// search target elements");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("EList<TransientElement> testList = tl.getTargetElements();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for(TransientElement testTE : testList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if(testTE.getVar().equals(var)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("varElement = testTE.getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("obj.eSet(f, varElement);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject rootElement = EcoreUtil.getRootContainer(tls.getTransientLinks().get(0).getTargetElements().get(0).getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("saveResource(rootElement);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static EObject createTargetElement(Resource MM, String className) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EFactory efactory = ((EPackage)MM.getContents().get(0)).getEFactoryInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EClass clazz = getEClassFromMM(MM, className);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EObject obj = efactory.create(clazz);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return obj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Vector<EObject> getElements4Type(Resource srcM, String typeName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Vector<EObject> match = new Vector<EObject>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TreeIterator<EObject> iter = srcM.getAllContents();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iter.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject obj = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(obj.eClass().getName().equals(typeName)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("match.add(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return match;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void saveResource(EObject rootElement) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ResourceSet resourceSet = new ResourceSetImpl();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"xmi\", new XMIResourceFactoryImpl());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource resource = resourceSet.createResource(URI.createFileURI(\"testmodel/modelB.xmi\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resource.getContents().add(rootElement);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resource.save(null);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static EClass getEClassFromMM(Resource MM, String className) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TreeIterator<EObject> iter = MM.getAllContents();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iter.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("EObject obj = iter.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(obj instanceof EClass) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("EClass clazz = (EClass) obj;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(clazz.getName().equals(className)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return clazz;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
